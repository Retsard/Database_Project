CREATE DATABASE fis_db;

USE fis_db;

CREATE ROLE superadmin;
GRANT ALL PRIVILEGES ON *.* TO superadmin WITH GRANT OPTION;

CREATE USER 'db_admin'@'%' IDENTIFIED BY 'Dbadmin123!';
GRANT superadmin TO 'db_admin'@'%'

CREATE TABLE crop (
  crop_id INT(7) AUTO_INCREMENT PRIMARY KEY,
  crop_type VARCHAR(50) NOT NULL,
  crop_name VARCHAR(50) NOT NULL,
  crop_description VARCHAR(200) NOT NULL,
  crop_image VARCHAR(255) NOT NULL,
  potential_yield INT(10) NOT NULL,
  farm_gate_price INT(10)
);

CREATE TABLE farmer (
  farmer_id INT(7) AUTO_INCREMENT PRIMARY KEY,
  first_name VARCHAR(50) NOT NULL,
  last_name VARCHAR(50) NOT NULL,
  age INT(10) NOT NULL,
  ethnic_origin VARCHAR(50),
  image VARCHAR(255) NOT NULL
);

CREATE TABLE city (
  city_id INT(7) AUTO_INCREMENT PRIMARY KEY,
  city_name VARCHAR(50) NOT NULL
);

CREATE TABLE barangay (
  barangay_id INT(7) AUTO_INCREMENT PRIMARY KEY,
  barangay_name VARCHAR(50) NOT NULL,
  city_id INT(7) REFERENCES city(city_id)
);

CREATE TABLE address (
  address_id INT(7) AUTO_INCREMENT PRIMARY KEY,
  barangay_id INT(7) REFERENCES barangay(barangay_id),
  city_id INT(7) REFERENCES city(city_id)
);

CREATE TABLE livestock (
  livestock_id INT(7) AUTO_INCREMENT PRIMARY KEY,
  livestock_type VARCHAR(50) NOT NULL,
  livestock_description VARCHAR(200) NOT NULL,
  livestock_image VARCHAR(255) NOT NULL
);

CREATE TABLE accounts (
  account_id INT(7) AUTO_INCREMENT PRIMARY KEY,
  account_name VARCHAR(50) NOT NULL,
  username VARCHAR(50) NOT NULL,
  password VARCHAR(50) NOT NULL
);

CREATE TABLE farm (
  farm_id INT(7) AUTO_INCREMENT PRIMARY KEY,
  farm_name VARCHAR(50) NOT NULL,
  farm_image VARCHAR(255) NOT NULL,
  farm_description VARCHAR(200) NOT NULL,
  area_size INT(10) NOT NULL,
  farmer_id INT(7) REFERENCES farmer(farmer_id),
  address_id INT(7) REFERENCES address(address_id)
);

CREATE TABLE farm_crop (
  farm_id INT(7) REFERENCES farm(farm_id),
  crop_id INT(7) REFERENCES crop(crop_id),
  PRIMARY KEY (farm_id, crop_id)
);

CREATE TABLE farm_livestock (
  farm_id INT(7) REFERENCES farm(farm_id),
  livestock_id INT(7) REFERENCES livestock(livestock_id),
  PRIMARY KEY (farm_id, livestock_id)
);


CREATE VIEW farms_with_livestock AS
SELECT f.farm_id, f.farm_name, GROUP_CONCAT(l.livestock_type SEPARATOR ', ') AS livestock_types
FROM farm f
JOIN farm_livestock fl ON f.farm_id = fl.farm_id
JOIN livestock l ON fl.livestock_id = l.livestock_id
GROUP BY f.farm_id, f.farm_name
ORDER BY f.farm_id ASC;

CREATE VIEW farms_with_crops AS
SELECT f.farm_id, f.farm_name, GROUP_CONCAT(c.crop_name SEPARATOR ', ') AS crop_names
FROM farm f
JOIN farm_crop fc ON f.farm_id = fc.farm_id
JOIN crop c ON fc.crop_id = c.crop_id
GROUP BY f.farm_id, f.farm_name
ORDER BY f.farm_id ASC;

CREATE VIEW crop_prices AS
SELECT c.crop_name, c.farm_gate_price, f.farm_name
FROM crop c
JOIN farm_crop fc ON c.crop_id = fc.crop_id
JOIN farm f ON fc.farm_id = f.farm_id
ORDER BY f.farm_name, c.crop_name;

CREATE VIEW farmers_with_farms AS
SELECT CONCAT(f.first_name, ' ', f.last_name) AS farmer_name, farm.farm_name
FROM farmer f
JOIN farm ON f.farmer_id = farm.farmer_id;

CREATE VIEW farms_with_locations AS
SELECT farm.farm_name, barangay.barangay_name, city.city_name
FROM farm
JOIN address ON farm.address_id = address.address_id
JOIN barangay ON address.barangay_id = barangay.barangay_id
JOIN city ON barangay.city_id = city.city_id;

CREATE VIEW farms_with_crops_and_location AS
SELECT farm.farm_name, GROUP_CONCAT(crop.crop_name SEPARATOR ', ') AS crops, barangay.barangay_name, city.city_name
FROM farm
JOIN farm_crop ON farm.farm_id = farm_crop.farm_id
JOIN crop ON farm_crop.crop_id = crop.crop_id
JOIN address ON farm.address_id = address.address_id
JOIN barangay ON address.barangay_id = barangay.barangay_id
JOIN city ON barangay.city_id = city.city_id
GROUP BY farm.farm_id, barangay.barangay_name, city.city_name;

CREATE VIEW crop_types_with_names AS
SELECT crop_type, GROUP_CONCAT(crop_name SEPARATOR ', ') AS crop_names
FROM crop
GROUP BY crop_type;


DROP TRIGGER IF EXISTS validate_farmer_age_trigger;

DELIMITER //
CREATE TRIGGER validate_farmer_age_trigger
BEFORE INSERT ON farmer
FOR EACH ROW
BEGIN
  IF NEW.age < 18 THEN
    SIGNAL SQLSTATE '45000'
      SET MESSAGE_TEXT = 'Invalid farmer age. The farmer must be 18 years or older.';
  END IF;
END//
DELIMITER ;

CREATE ROLE manage;

GRANT INSERT, SELECT, UPDATE ON fis_db.crop TO manage;
GRANT INSERT, SELECT, UPDATE ON fis_db.farmer TO manage;
GRANT INSERT, SELECT, UPDATE ON fis_db.city TO manage;
GRANT INSERT, SELECT, UPDATE ON fis_db.barangay TO manage;
GRANT INSERT, SELECT, UPDATE ON fis_db.address TO manage;
GRANT INSERT, SELECT, UPDATE ON fis_db.livestock TO manage;
GRANT INSERT, SELECT, UPDATE ON fis_db.farm TO manage;
GRANT INSERT, SELECT, UPDATE ON fis_db.farm_crop TO manage;
GRANT INSERT, SELECT, UPDATE ON fis_db.farm_livestock TO manage;

GRANT SELECT ON fis_db.crop_prices TO manage;
GRANT SELECT ON fis_db.crop_types_with_names TO manage;
GRANT SELECT ON fis_db.farmers_with_farms TO manage;
GRANT SELECT ON fis_db.farms_with_crops TO manage;
GRANT SELECT ON fis_db.farms_with_crops_and_location TO manage;
GRANT SELECT ON fis_db.farms_with_livestock TO manage;
GRANT SELECT ON fis_db.farms_with_locations TO manage;

FLUSH PRIVILEGES;

CREATE USER 'manager'@'%' IDENTIFIED BY 'Dbadmin123!';
GRANT manage TO 'manager'@'%';

CREATE ROLE view;

GRANT SELECT ON fis_db.crop_prices TO view;
GRANT SELECT ON fis_db.crop_types_with_names TO view;
GRANT SELECT ON fis_db.farmers_with_farms TO view;
GRANT SELECT ON fis_db.farms_with_crops TO view;
GRANT SELECT ON fis_db.farms_with_crops_and_location TO view;
GRANT SELECT ON fis_db.farms_with_livestock TO view;
GRANT SELECT ON fis_db.farms_with_locations TO view;

FLUSH PRIVILEGES;

CREATE USER 'viewer'@'%' IDENTIFIED BY 'Dbadmin123!';
GRANT view TO 'viewer'@'%';









